@inject IGenericService<Docente> docenteService

@if (docenteEdit == null )
{
    <p><em>Cargando...</em></p>
}
else
{
    <div style="background-color: @(isEditing ? "lightyellow": "white")">
        <EditForm Model="@docenteEdit" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="container">
            <div class="row">
                <InputTextNombre Entity="@docenteEdit" TextLabel="Apellido y nombre docente:"/>
                <ValidationSummary />
                <ButtonsGuardarCancelar isEditing="@isEditing"  OnCancelar="HandleCancelar" />
            </div>
        </div>
        </EditForm>
    </div>
}
@code {

    [Parameter]
    public EventCallback OnGuardar { get; set; }

    [Parameter]
    public EventCallback OnCancelar { get; set; }

    [Parameter]
    public Docente? docente { get; set; }

    public Docente? docenteEdit { get; set; }



    private bool isEditing => docente != null;

    private List<Docente>? docentes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (docente == null)
        {
            docenteEdit = new Docente();
        } else
        {
            docente.CopyPropertiesTo(docenteEdit);
        }


        StateHasChanged();
    }


    private async Task Guardar()
    {
        if (isEditing)
            await docenteService.UpdateAsync(docenteEdit);
        else
            await docenteService.AddAsync(docenteEdit);
        await OnGuardar.InvokeAsync();
    }

    private async Task HandleCancelar()
    {
        await OnCancelar.InvokeAsync();
    }
}